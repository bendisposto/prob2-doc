import freemarker.template.Configuration

import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.2'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
        classpath 'org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.6'
        classpath 'org.asciidoctor:asciidoctorj:1.5.6'
        classpath 'com.github.jruby-gradle:jruby-gradle-plugin:1.6.0'
        classpath 'com.github.spullara.mustache.java:compiler:0.8.12'
        classpath 'org.freemarker:freemarker:2.3.23'
        classpath 'org.yaml:snakeyaml:1.17'
    }
}

apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.github.jruby-gradle.base'

def cfg = new Configuration()

repositories {
    jcenter()
}

dependencies {
    gems 'rubygems:asciidoctor-diagram:1.2.1'
    gems 'rubygems:asciidoctor-bibtex:0.3.1'
}

asciidoctorj {
    version = '1.5.6'
}

task cleanpdf() {
    def tree = fileTree('build/asciidoc/pdf') {
        include '*.pdf'
    }
    tree.each { it.delete() }
}

task bibtex() {
    doFirst {
        def tree = fileTree('src/docs/bibtex') {
            include "**/*.bib"
        }
        def files = tree.files
        file('src/docs/asciidoc/combined.bib').text = files.collect {it.text}.join("\n")
    }
}

task buildMaindocs() {
    doLast {
        def template = cfg.getTemplate("src/docs/templates/handbook.ftlh")
        def parser = new Yaml()
        def books = parser.loadAll(("config.yaml" as File).text)
        books.each {book ->
            def includes = []
            book.content.each {dir ->
                includes << fileTree('src/docs/chapter/'+dir).collect().sort()
            }
            book.directories = includes
            new OutputStreamWriter(new FileOutputStream("src/docs/asciidoc/"+book.file), "UTF-8").withWriter {w ->
                template.process(book, w)
            }
        }
    }
}

asciidoctor {
    dependsOn = [cleanpdf, bibtex, jrubyPrepare, buildMaindocs]
    requires = ['asciidoctor-diagram', 'asciidoctor-bibtex']
    gemPath = jrubyPrepare.outputDir

    options doctype: 'book'

    backends = ['html5', 'pdf']

    attributes = [
        'source-highlighter': 'coderay',
        'coderay-linenums-mode': 'table',
        'toc': 'left',
        'imagesdir': 'images',
        'icon': 'font',
        'linkattrs': true,
        'encoding': 'utf-8',
        'bibtex-file': 'combined.bib',
    ]

    sources {
        include '*.adoc'
    }

    resources {
        from('src/docs/asciidoc') {
            include '**/*.png'
        }
    }
}

clean {
    doFirst {
        def tree = fileTree('src/docs/asciidoc/images') {
            include '**/diag-*'
        }
        tree.each { it.delete() }
        tree = fileTree('src/docs/asciidoc') {
            include '*.adoc'
        }
        tree.each { it.delete() }
        file('src/docs/asciidoc/combined.bib').delete()
    }
}

defaultTasks 'clean', 'asciidoctor'
